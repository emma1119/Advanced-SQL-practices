2004. The Number of Seniors and Juniors to Join the Company

# Write your MySQL query statement below
# calculate the rolling sum() by experience and salary seperated by junior and senior
# join by b.rolling_sum<=70000-(select ifnull(max(rolling_sum),0) from senior where rolling_sum<=70000)

with senior as 
( 
select 
employee_id,
experience,
salary,
sum(salary) over (order by experience, salary) as rolling_sum
from candidates 
where experience='Senior'
 ),
junior as 
(
select 
employee_id,
experience,
salary,
sum(salary) over (order by experience, salary) as rolling_sum
from candidates 
where experience='Junior'
)
select
'Senior' as experience,
ifnull(count(distinct a.employee_id),0) as  accepted_candidates
from senior as a 
where a.rolling_sum<=70000
union all 
select
'Junior' as experience,
ifnull(count(distinct b.employee_id),0) as  accepted_candidates
from
junior as b 
where b.rolling_sum<=70000-(select ifnull(max(rolling_sum),0) from senior where rolling_sum<=70000)



2010. The Number of Seniors and Juniors to Join the Company II
# Write your MySQL query statement below

# Keep hiring the senior with the smallest salary until you cannot hire any more seniors.
# Use the remaining budget to hire the junior with the smallest salary.
# Keep hiring the junior with the smallest salary until you cannot hire any more juniors.
# Write an SQL query to find the ids of seniors and juniors hired under the mentioned criteria.


with 
Senior 
as 
(select employee_id,
experience,
salary,
sum(salary) over (order by salary) as total_sum
from candidates 
where experience = 'Senior'
),
junior 
as 
(select employee_id,
experience,
salary,
sum(salary) over (order by salary) as total_sum
from candidates 
where experience = 'junior'
)
select 
distinct 
employee_id
from senior as a 
where total_sum <=70000
union all 
select 
distinct 
employee_id
from junior  
where total_sum <=70000-(select ifnull(max(total_sum),0) from Senior where total_sum <=70000);


2051. The Category of Each Member in the Store

select 
c.member_id,
c.name,
case  when 
100*count(b.charged_amount)/count(a.visit_date) >=80 then 'Diamond'
when 100*count(b.charged_amount)/count(a.visit_date) >= 50 then 'Gold'
when 100*count(b.charged_amount)/count(a.visit_date) >=0 then 'Silver'
else 'Bronze' end as category
from members as c 
left join 
visits as a on a.member_id = c.member_id
left join 
purchases as b on a.visit_id = b.visit_id
group by c.member_id,
c.name

2066. Account Balance
# 同一个账户的rolling sum只需要partition by id order by date
select 
account_id,
day,
sum(mod_amount) over (partition by account_id order by day) as balance
from 
(select 
account_id,
day,
type,
case when type = 'Deposit' then amount
else -amount end as mod_amount
from transactions ) as  a 
order by account_id, day 

