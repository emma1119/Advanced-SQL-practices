
-- use case 1
-- assign a seqquence of the list of month's first date for the last 5 months based on the current_date

create table if not exists date_temp
(seq string, start_dt string, process_date string) store as parquet;
insert into table date_temp
select '1', date_add(last_day(add_month(${current_date},-2),1), {$endDate}
union all 
select '2', date_add(last_day(add_month(${current_date},-3),1), {$endDate}
union all 
select '3', date_add(last_day(add_month(${current_date},-4),1), {$endDate}
union all 
select '4', date_add(last_day(add_month(${current_date},-5),1), {$endDate}
union all 
select '5', date_add(last_day(add_month(${current_date},-6),1), {$endDate};


-- use case 2
-- pilot a tall format table into a wide table 

select date_var
,max(case when metricid = '001' then metricvalue else null end) as score001
,max(case when metricid = '002' then metricvalue else null end) as score002
,max(case when metricid = '003' then metricvalue else null end) as score003
from raw_table
group by date_var;


-- use case 3
-- MoM and YoY calculation 
select 
date_var
, lag(value, 1) over (order by date_var) as delta
, (value -lag(value, 1) over (order by date_var))/coalesce(lag(value, 1) over (order by date_var) ,1) as MOM
, (value -lag(value, 12) over (order by date_var))/coalesce(lag(value, 1) over (order by date_var) ,12) as YoY
from 
table1;


-- use case 4
-- use regular expression to identify non usual emails: regexp_extract fetch for a pattern specified
select 
case when 
regexp_extract(lower(email_address), '^.+@[^\.].*\.[a-z]{2.}$',0' != lower(email_address) then 'invalid'
else 'Valid' end as email_val
from email_table;
