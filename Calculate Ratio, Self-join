
########################## Calculate Ratio ########################################################


# understand what's on the denominator and nominator is the key for ratio problem
# notice if it's asking for the percentage (*100) number or the ratio itself


# 1174. Immediate Food Delivery II
# If the customer's preferred delivery date is the same as the order date, then the order is called immediate; otherwise, it is called scheduled.

# The first order of a customer is the order with the earliest order date that the customer made. It is guaranteed that a customer has precisely one first order.

# Write an SQL query to find the percentage of immediate orders in the first orders of all customers, rounded to 2 decimal places.

# The query result format is in the following example.

# LeetCode
# https://leetcode-cn.com/problems/immediate-food-delivery-ii


select 
round(count(distinct customer_id)*100/(select count(distinct customer_id) from delivery ) , 2)  as immediate_percentage
from
(select distinct customer_id
from delivery
group by customer_id
having min(order_date) = min(customer_pref_delivery_date)) as a 



# 1132. Reported Posts II
# Write an SQL query to find the average daily percentage of posts that got removed after being reported as spam, rounded to 2 decimal places.

# out of the posts reported as spam, how many has been removed

# Write your MySQL query statement below

select round(avg(reported),2) as average_daily_percent
from (
select 
count(distinct b.post_id)*100/count(distinct a.post_id) as reported,
a.action_date
from actions  as a 
left join removals as b
on a.post_id = b.post_id
where a.action = 'report' and a.extra = 'spam'
group by a.action_date ) c


########################## self-join ########################################################


# Consicutive 5, use dense_rank() over and date --> reference_date count(*)  >=5

# 1454. Active Users
# Active users are those who logged in to their accounts for five or more consecutive days.

# LeetCode）
# https://leetcode-cn.com/problems/active-users

# Write your MySQL query statement below

with t1 as
(select 
distinct
id,
login_date,
dense_rank() over (partition by id order by login_date) as ct,
DATE_SUB(login_date, INTERVAL DENSE_RANK() OVER ( PARTITION BY id ORDER BY login_date ASC ) DAY) as ref
from logins) 
select 
distinct
a.id ,
b.name
from t1  as a 
left join accounts as b 
on a.id = b.id
group by a.id, a.ref 
having count(*) >=5
order by id 


# Write your MySQL query statement below
# 1097. Game Play Analysis V

# Write an SQL query to report for each install date, the number of players that installed the game on that day, and the day one retention.

# （LeetCode）
# https://leetcode-cn.com/problems/game-play-analysis-v

select 
a.install_dt,
count(distinct a.player_id) as installs,
round(count(distinct b.player_id)/count(distinct a.player_id),2) as Day1_retention
from 
(select 
player_id,
min(event_date) as install_dt,
date_add(min(event_date), interval 1 day) as one_day_after
from activity
group by player_id ) as a 
left join 
activity as b 
on a.player_id = b.player_id and a.one_day_after = b.event_date
group by a.install_dt


# Write your MySQL query statement below

# 579. Find Cumulative Salary of an Employee

#use left join where b.id is null to remove those with max(month)

select 
a.id,
a.month,
sum(ifnull(b.salary,0)) as Salary 
from Employee as a 
inner join 
employee as b 
on a.id = b.id 
left join 
(select id, max(month) as max_month from employee group by id) as c
on a.id =c.id and a.month =c.max_month
where c.max_month is null and b.month between (a.month -2) and a.month
group by a.id, a.month
order by a.id, a.month desc


# Write your MySQL query statement below

# 1270. All People Report to the Given Manager

# tricky part is to rule out boss himself

# Write an SQL query to find employee_id of all employees that directly or indirectly report their work to the head of the company.

# The indirect relation between managers will not exceed three managers as the company is small.



select 
distinct
a.employee_id
from employees  as a 
left join employees as b 
on a.manager_id = b.employee_id
left join employees as c
on b.manager_id = c.employee_id
where 
(a.manager_id = '1' or
b.manager_id = '1' or 
c.manager_id = '1')
and a.employee_id != '1'


# 1285. Find the Start and End Number of Continuous Ranges

# Write your MySQL query statement below
with new_table as 
(select 
log_id,
log_id-row_number() over (Order BY log_id) as delta
from logs )
select 
min(log_id) as start_id,
max(log_id) as end_id
from new_table a 
group by delta


#1811. Find Interview Candidates
#self join on medal winner, consecutive winner

# Write your MySQL query statement below

#dense_rank() partition by user_id!!! understand the aggregation level should be by id and compare to the context_id
 
with table1 as 
(
select 
contest_id,
gold_medal as user_id
from contests
union all
select
contest_id,
silver_medal as user_id
from contests
union all
select
contest_id,
bronze_medal  as user_id
 from contests
)
select 
b.name,
b.mail
from contests as a
left join users as b 
on a.gold_medal = b.user_id
group by b.name, b.mail
having count(distinct a.contest_id) >2
union 
select 
c.name,
c.mail
from 
(select *,
contest_id -(dense_rank() over (partition by user_id order by contest_id)) as context_order
from table1 ) as d
left join users as c
on d.user_id = c.user_id
group by c.name, c.mail, d.context_order, d.user_id
having count(*) >2;


# Use instr(a,b)>0 to fuzzy join
#2199. Finding the Topic of Each Post
# Write your MySQL query statement below

# The INSTR() function returns the position of the first occurrence of a string in another string.
# word's position func in content


# instr(concat(' ',content,' '),concat(' ',word,' '))>0

select post_id,ifnull(group_concat(distinct topic_id),'Ambiguous!') as topic
from posts
left join keywords
on instr(concat(' ',content,' '),concat(' ',word,' '))>0
group by post_id


# select post_id,
# group_concat(c1,c2,c3,c4 order by c1 SEPARATOR ',')
# from 
# (select 
# post_id,
# case when lower(content) like '%handball%' or lower(content) like '%football%' then '1' 
# else '' end as c1,
# case when lower(content) like '%war %' then '3'
# else ''  end as c2 ,
# case when lower(content) like '%vaccine%' then '2'
# else ''  end as c3,
# case when lower(content) not like '%handball%' and lower(content) not like '%football%' 
# and lower(content) not like '%war %' and lower(content) not like '%vaccine%'
# then 'Ambiguous!' else ''  end as c4
# from posts) a
# group by post_id


###2252. Dynamic Pivoting of a Table
# 使用max(case when ...) pivot 一个long table to wide table
CREATE PROCEDURE PivotProducts()
BEGIN
	# Write your MySQL query statement below.
	select product_id,
    max(case when store = 'LC_Store' then price else null end) as LC_Store,
    max(case when store = 'Nozama' then price else null end) as Nozama,
    max(case when store = 'Shop' then price else null end) as Shop,
    max(case when store = 'Souq' then price else null end) as Souq
    from products
    group by product_id
    order by product_id;
END
