# Write your MySQL query statement below

# Write an SQL query to find the most recent order(s) of each product.

# Return the result table ordered by product_name in ascending order and in case of a tie by the product_id in ascending order. If there still a tie, order them by order_id in ascending order.

#184. Department Highest Salary

# LeetCode）
# https://leetcode-cn.com/problems/the-most-recent-orders-for-each-product

select 
b.product_name,
a.product_id,
order_id,
order_date
from 
(select 
product_id,
order_id,
order_date,
dense_rank() over (partition by product_id order by order_date desc) as rk
from orders) as a 
left join 
products as b 
on a.product_id = b.product_id
where rk =1
order by b.product_name , a.product_id, order_id



# for inner join, there is no difference between on and where condition

# for a left join b, when apply condition after on : a.number=1 ， the records from table a will all exists in final results, but those with a.number!=1 will all get nulls for matching b.feilds
# because on applies to the joining action only 
# when apply condition after where: a.number =1, the record where a.number!=1 will be filtered out from the final results. this is applied after joinning


# for a left join b, when apply condition after on : b.number=1 ， the records from table b matching a will all exists in final results, but those with b.number!=1 will show nulls for b.felds
# because on applies to the joining action only 
# when apply condition after where: a.number =1, the record only shoews b.number=1 records in the final results. this is applied after joinning


# Write your MySQL query statement below



with unit as 
(select 
customer_id,
product_id,
count(*) as ct
from orders
group by customer_id,
product_id) 
select 
c.customer_id,
c.product_id,
b.product_name
from 
(select customer_id,
 max(ct) as  ct
from unit
group by 
customer_id) as a 
inner join unit as c 
on a.customer_id =c.customer_id and a.ct = c.ct
inner join 
products as b 
on c.product_id = b.product_id




# Write your MySQL query statement below

# Write an SQL query to find all the people who viewed more than one article on the same date.

select distinct id from 
(select 
viewer_id as id
,view_date
from 
views 
group by viewer_id, view_date
having count(distinct article_id) > 1)  as a 


# Write your MySQL query statement below
2175. The Change in Global Rankings

难点在于+-rank的数值时，如果出现负数会出现error，sql需要cast 成signed

select
a.team_id,
a.name,
cast(rk as SIGNED) - cast(dense_rank() over (order by (a.points+b.points_change) desc, name) as SIGNED) as rank_diff
from
(select *,
dense_rank() over (order by  points  desc, name) as rk
from TeamPoints) as a 
left join 
pointschange as b 
on a.team_id = b.team_id


# 2173. Longest Winning Streak

# The winning streak of a player is the number of consecutive wins uninterrupted by draws or losses.

# Write an SQL query to count the longest winning streak for each player.

# Return the result table in any order.

# The query result format is in the following example.
# +-----------+------------+--------+
# | player_id | match_day  | result |
# +-----------+------------+--------+
# | 1         | 2022-01-17 | Win    |
# | 1         | 2022-01-18 | Win    |
# | 1         | 2022-01-25 | Win    |
# | 1         | 2022-01-31 | Draw   |
# | 1         | 2022-02-08 | Win    |
# | 2         | 2022-02-06 | Lose   |
# | 2         | 2022-02-08 | Lose   |
# | 3         | 2022-03-30 | Win    |
# +-----------+------------+--------+
# Output: 
# +-----------+----------------+
# | player_id | longest_streak |
# +-----------+----------------+
# | 1         | 3              |
# | 2         | 0              |
# | 3         | 1              |


# Write your MySQL query statement below
# 排名做差 分辨连续的instance用于group，再单独算每个group最多win有多少
# 如果没有用0

select 
a.player_id,
max(ct) as longest_streak
from 
(select 
b.player_id,
cast(rk as SIGNED)-cast(rk_r as SIGNED) ,
ifnull(count(if(result='win',1,null)),0) as ct
from
(   
select 
player_id,
result,
row_number() over (partition by player_id order by match_day) as rk,
row_number() over (partition by player_id,result order by match_day) as rk_r,
match_day
from matches 
) b 
group by b.player_id, cast(rk as SIGNED)-cast(rk_r as SIGNED) ) a 
group by player_id


