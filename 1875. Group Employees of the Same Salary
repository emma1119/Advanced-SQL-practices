# A company wants to divide the employees into teams such that all the members on each team have the same salary. The teams should follow these criteria:

# Each team should consist of at least two employees.
# All the employees on a team should have the same salary.
# All the employees of the same salary should be assigned to the same team.
# If the salary of an employee is unique, we do not assign this employee to any team.
# A team's ID is assigned based on the rank of the team's salary relative to the other teams' salaries, where the team with the lowest salary has team_id = 1. Note that the salaries for employees not on a team are not included in this ranking.
# Write an SQL query to get the team_id of each employee that is in a team.

# Return the result table ordered by team_id in ascending order. In case of a tie, order it by employee_id in ascending order.

# （LeetCode）
# https://leetcode-cn.com/problems/group-employees-of-the-same-salary


# Write your MySQL query statement below

# dense_rank() in case of tie, assign the same, then go to the next number
# row_number() in case of tie, will still assign different number per record

select 
a.employee_id,
a.name,
a.salary,
dense_rank() over (order by a.salary) as team_id 
from 
employees a 
inner join 
(select
salary,
count(distinct employee_id) as ct
from
employees 
group by salary
having count(distinct employee_id) >=2)
b 
on a.salary = b.salary
order by team_id, employee_id;

# You are running an e-commerce site that is looking for imbalanced orders. An imbalanced order is one whose maximum quantity is strictly greater than the average quantity of every order (including itself).

# LeetCode
# https://leetcode-cn.com/problems/orders-with-maximum-quantity-above-average

# Write your MySQL query statement below

# understanding the question is the key

select distinct order_id 
from 
ordersdetails 
group by order_id
having max(quantity) > 
(select max(avg_num) from
 (select order_id, 
 sum(quantity)/count(distinct product_id) as avg_num
 from ordersdetails
group by order_id) a)

1917. Leetcodify Friends Recommendations
# Write your MySQL query statement below
#先求同一日听3首以上的歌的人，再剔除非好友的数据。

select 
distinct
a.user_id,
a.recommended_id
from 
(select 
a.user_id ,
b.user_id as recommended_id
from listens as a 
left join listens as b 
on a.song_id = b.song_id and a.day = b.day
where a.user_id != b.user_id
group by a.user_id, b.user_id, a.day
having count(distinct a.song_id) >=3 ) as a 
left join 
friendship as b 
on (a.user_id = b.user1_id and a.recommended_id = b.user2_id)
or (a.user_id = b.user2_id and a.recommended_id = b.user1_id)
where b.user2_id is null



