
########################## Calculate Ratio ########################################################


# understand what's on the denominator and nominator is the key for ratio problem
# notice if it's asking for the percentage (*100) number or the ratio itself


# 1174. Immediate Food Delivery II
# If the customer's preferred delivery date is the same as the order date, then the order is called immediate; otherwise, it is called scheduled.

# The first order of a customer is the order with the earliest order date that the customer made. It is guaranteed that a customer has precisely one first order.

# Write an SQL query to find the percentage of immediate orders in the first orders of all customers, rounded to 2 decimal places.

# The query result format is in the following example.

# LeetCode
# https://leetcode-cn.com/problems/immediate-food-delivery-ii


select 
round(count(distinct customer_id)*100/(select count(distinct customer_id) from delivery ) , 2)  as immediate_percentage
from
(select distinct customer_id
from delivery
group by customer_id
having min(order_date) = min(customer_pref_delivery_date)) as a 



# 1132. Reported Posts II
# Write an SQL query to find the average daily percentage of posts that got removed after being reported as spam, rounded to 2 decimal places.

# out of the posts reported as spam, how many has been removed

# Write your MySQL query statement below

select round(avg(reported),2) as average_daily_percent
from (
select 
count(distinct b.post_id)*100/count(distinct a.post_id) as reported,
a.action_date
from actions  as a 
left join removals as b
on a.post_id = b.post_id
where a.action = 'report' and a.extra = 'spam'
group by a.action_date ) c


########################## self-join ########################################################


# Consicutive 5, use dense_rank() over and date --> reference_date count(*)  >=5

# 1454. Active Users
# Active users are those who logged in to their accounts for five or more consecutive days.

# LeetCode）
# https://leetcode-cn.com/problems/active-users

# Write your MySQL query statement below

with t1 as
(select 
distinct
id,
login_date,
dense_rank() over (partition by id order by login_date) as ct,
DATE_SUB(login_date, INTERVAL DENSE_RANK() OVER ( PARTITION BY id ORDER BY login_date ASC ) DAY) as ref
from logins) 
select 
distinct
a.id ,
b.name
from t1  as a 
left join accounts as b 
on a.id = b.id
group by a.id, a.ref 
having count(*) >=5
order by id 


# Write your MySQL query statement below
# 1097. Game Play Analysis V

# Write an SQL query to report for each install date, the number of players that installed the game on that day, and the day one retention.

# （LeetCode）
# https://leetcode-cn.com/problems/game-play-analysis-v

select 
a.install_dt,
count(distinct a.player_id) as installs,
round(count(distinct b.player_id)/count(distinct a.player_id),2) as Day1_retention
from 
(select 
player_id,
min(event_date) as install_dt,
date_add(min(event_date), interval 1 day) as one_day_after
from activity
group by player_id ) as a 
left join 
activity as b 
on a.player_id = b.player_id and a.one_day_after = b.event_date
group by a.install_dt


